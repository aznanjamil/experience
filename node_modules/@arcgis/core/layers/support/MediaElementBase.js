/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import{_ as e}from"../../chunks/tslib.es6.js";import{NumericIdentifiableMixin as r}from"../../core/Identifiable.js";import o from"../../core/Loadable.js";import t from"../../core/Logger.js";import{MultiOriginJSONMixin as n}from"../../core/MultiOriginJSONSupport.js";import{property as s}from"../../core/accessorSupport/decorators/property.js";import"../../core/has.js";import"../../core/RandomLCG.js";import{reader as c}from"../../core/accessorSupport/decorators/reader.js";import{subclass as i}from"../../core/accessorSupport/decorators/subclass.js";import{writer as p}from"../../core/accessorSupport/decorators/writer.js";import a from"./ControlPointsGeoreference.js";import l from"./CornersGeoreference.js";import f from"./ExtentAndRotationGeoreference.js";import m from"./GeoreferenceBase.js";import{toControlPointsGeoreference as u}from"./mediaUtils.js";const d={key:"type",base:m,typeMap:{"control-points":a,corners:l,"extent-and-rotation":f}},y={key:"type",base:m,typeMap:{"control-points":a}};let h=class extends(r(n(o))){constructor(e){super(e),this.georeference=null,this.opacity=1}readGeoreference(e){return a.fromJSON(e)}writeGeoreference(e,r,o,n){const s=n?.resources?.pendingOperations,c=()=>{const s=u(this.georeference,this.contentWidth,this.contentHeight);s&&("control-points"!==e.type&&t.getLogger(this).warn(`only georeference of type 'control-points' may be persisted. The georeference of type '${e.type}' has been automatically converted.`),r[o]=s.write({},n))};if("control-points"!==e.type&&!this.loaded&&s)return r[o]={},void s.push(this.load().then(c));c()}get contentWidth(){return 0}get contentHeight(){return 0}toSource(e){const{georeference:r,contentWidth:o,contentHeight:t}=this;if(null==e||null==r||0===o||0===t)return null;const n=r.toSourceNormalized(e);return null==n?null:(n.x*=o,n.y*=t,n)}};e([s({types:d,json:{write:!0,types:y}})],h.prototype,"georeference",void 0),e([c("georeference")],h.prototype,"readGeoreference",null),e([p("georeference")],h.prototype,"writeGeoreference",null),e([s({json:{read:!1,write:!1}})],h.prototype,"opacity",void 0),h=e([i("esri.layers.support.MediaElementBase")],h);const g=h;export{g as default};
