/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import{numericHash as t}from"../../../../../../core/string.js";import{FeatureTechniqueInstance as e}from"./TechniqueInstance.js";import{castInstanceId as n}from"./mesh/instanceIdUtils.js";class s{constructor(){this._instanceById=new Map}destroy(){this._instanceById.clear()}get size(){return this._instanceById.size}entries(){return this._instanceById.entries()}updateStart(){this._instanceByIdNext=new Map}updateEnd(){if(!this._instanceByIdNext)throw new Error("InternalError: Found updateEnd call without corresponding updateStart");for(const t of this._instanceById.keys())this._instanceByIdNext.has(t)||this._instanceById.delete(t);for(const[t,e]of this._instanceByIdNext.entries()){const n=this._instanceById.get(t);n?n.setInput(e.getInput()):this._instanceById.set(t,e)}this._instanceByIdNext=null}values(){return this._instanceById.values()}ensureInstance(s,i){const r=t(`${s.type}.${JSON.stringify(i)}`);if(this._instanceByIdNext){const t=new e(n(r),s,i);return this._instanceByIdNext.set(r,t),t}if(!this._instanceById.has(r)){const t=new e(n(r),s,i);this._instanceById.set(r,t)}return this._instanceById.get(r)}getInstance(t){return this._instanceById.get(t)}}export{s as default};
