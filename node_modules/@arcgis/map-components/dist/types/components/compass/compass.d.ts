import type { EventEmitter } from "../../stencil-public-runtime";
import type Compass from "@arcgis/core/widgets/Compass";
import type { ArcgisReferenceElement } from "../../utils/component-utils";
import type { ControllerManager, Use } from "@arcgis/components-controllers";
export type CompassWidget = InstanceType<typeof Compass>;
type CompassOrientation = {
    x?: number;
    y?: number;
    z?: number;
};
declare const useCompassWidget: (component: import("@arcgis/components-controllers/dist/Controller-BFWNX_g8").S & {
    manager: ControllerManager<import("@arcgis/components-controllers/dist/Controller-BFWNX_g8").B>;
    el: HTMLElement;
    preserveOnDisconnect?: boolean | undefined;
    destroy?: (() => Promise<void>) | undefined;
} & Pick<Compass, "label" | "icon" | "viewModel"> & {
    reactiveUtils?: __esri.reactiveUtils | undefined;
    state?: unknown;
    viewModel?: __esri.CompassViewModel | undefined;
    icon: string | import("@arcgis/components-utils").Nil;
    label: string | import("@arcgis/components-utils").Nil;
    view?: __esri.MapView | import("@arcgis/components-utils").Nil;
    referenceElement: string | ArcgisReferenceElement | undefined;
    position: string;
    arcgisReady: EventEmitter<never>;
    arcgisPropertyChange: import("@arcgis/components-controllers").CovariantEventEmitter<{
        name: string;
    }>;
    el: HTMLElement & {
        childElem?: HTMLElement | undefined;
    };
    childElem?: HTMLElement | undefined;
}) => Compass;
export declare class ArcgisCompass implements Use<typeof useCompassWidget> {
    manager: ControllerManager<this>;
    el: HTMLElement;
    reactiveUtils: __esri.reactiveUtils;
    widget: Compass;
    viewModel: __esri.CompassViewModel;
    icon: string;
    label: string;
    orientation: CompassOrientation;
    position: string;
    referenceElement: ArcgisReferenceElement | string;
    state: "disabled" | "rotation" | "compass";
    arcgisReady: EventEmitter<never>;
    arcgisPropertyChange: import("@arcgis/components-controllers").CovariantEventEmitter<{
        name: "orientation";
    }>;
    reset(): Promise<void>;
}
export {};
