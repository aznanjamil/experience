import type { BaseComponent, CovariantEventEmitter, Use } from "@arcgis/components-controllers";
import { AccessorController } from "@arcgis/components-controllers";
import type { Nil } from "@arcgis/components-utils";
import type { ArcGISMapView, ArcGISSceneView } from "../components/types";
import type { ArcgisReferenceElement } from "../utils/component-utils";
import { type EventEmitter } from "../stencil-public-runtime";
type Requires<Props, ViewModel extends ViewModelInstance> = BaseComponent & Pick<ViewModel, keyof Props & keyof ViewModel> & Uses<ViewModel>;
type ViewModelInstance = __esri.Accessor & Partial<__esri.Evented> & {
    state?: string;
    view?: ArcGISMapView | ArcGISSceneView | undefined;
};
type Uses<ViewModel extends ViewModelInstance> = {
    reactiveUtils?: typeof __esri.reactiveUtils;
    state?: ViewModel["state"];
    icon: Nil | string;
    label: Nil | string;
    uiStrings?: object;
    view?: ArcGISMapView | ArcGISSceneView | undefined;
    referenceElement: ArcgisReferenceElement | string | undefined;
    arcgisReady: EventEmitter<never>;
    position: string;
    arcgisPropertyChange: CovariantEventEmitter<{
        name: string;
    }>;
    el: HTMLElement & {
        childElem?: HTMLElement;
    };
    childElem?: HTMLElement;
};
/**
 * A controller for a mapping component that:
 * - loads the viewModel
 * - initializes the viewModel with the component's properties
 * - does two-way binding between view model and component properties
 * - re-emits the viewModel's events on the component
 * - type-checks everything âœ¨
 *
 * Documentation:
 * https://devtopia.esri.com/WebGIS/arcgis-web-components/blob/main/packages/map-components/src/controllers/useViewModel.md
 */
export declare const makeViewModelController: <Props, ViewModel extends ViewModelInstance>(loadViewModel: (props: Omit<Props, "view">) => Promise<ViewModel>) => (component: Requires<Props, ViewModel>) => ViewModel;
export declare class ViewModelController<Props, ViewModel extends ViewModelInstance> extends AccessorController<Props, ViewModel, Uses<ViewModel>> {
    hostConnected(): void;
    hostLoad(): Promise<void>;
    hostLoaded(): void;
    private _watchMetaProperties;
    private _reEmitViewModelEvents;
    hostDisconnected(): void;
}
/**
 * Helper utility to get component type from a controller. Can be used in
 * "implements"
 * @example
 * const useHomeViewModel = makeViewModelController(newWidgetsHomeHomeViewModel);
 * export class Home implements ViewModelComponent<typeof useHomeViewModel> {
 * // No need for "implements BaseComponent" as that's already included in
 * // every controller
 *
 * @remarks
 * TypeScript detects errors even without
 * ViewModelComponent<typeof useHomeViewModel>, but ViewModelComponent makes
 * errors display in a more readable format
 *
 * @remarks
 * This type is equivalent to Use<>, and exists mainly to improve readability
 * of the "implements" section
 */
export type ViewModelComponent<Callback extends (component: any) => unknown> = Use<Callback>;
export {};
