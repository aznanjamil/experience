/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
 * v4.30.0-next.37
 */
import { r as registerInstance, c as createEvent, h, g as getElement } from './index-6e172aac.js';
import { e as newWidgetsAttachments, i as importCoreReactiveUtils } from './index-0bc55ca5.js';
import { d as checkForExpand, a as addHandles } from './component-utils-23194f7c.js';
import { o as onDisconnectedHelper } from './disconnected-6cf1c100.js';

const attachmentsCss = "";

const ArcgisAttachments = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.widgetReady = createEvent(this, "widgetReady", 7);
        this._watchHandles = [];
        this.referenceElement = undefined;
        this.position = "bottom-left";
        this.expandable = false;
        this.capabilities = undefined;
        this.displayType = undefined;
        this.graphic = undefined;
        this.submitting = undefined;
        this.visibleElements = undefined;
        this.widget = undefined;
    }
    capabilitiesWatcher(newValue) {
        if (this.widget) {
            this.widget.capabilities = newValue;
        }
    }
    displayTypeWatcher(newValue) {
        if (this.widget) {
            this.widget.displayType = newValue;
        }
    }
    graphicWatcher(newValue) {
        if (this.widget) {
            this.widget.graphic = newValue;
        }
    }
    visibleElementsWatcher(newValue) {
        if (this.widget) {
            this.widget.visibleElements = newValue;
        }
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentDidLoad() {
        const params = this._createParams();
        const widget = await newWidgetsAttachments(params);
        this.widget = widget;
        await this._addWatchers();
        this.widgetReady.emit({ widget: this.widget });
        checkForExpand(this);
    }
    disconnectedCallback() {
        onDisconnectedHelper(this);
    }
    render() {
        if (this.expandable) {
            return (h("arcgis-expand", { position: this.position, ref: (el) => (this.expandElem = el) }, h("div", { ref: (el) => (this.childElem = el) })));
        }
        return h("div", { ref: (el) => (this.childElem = el) });
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    async _addWatchers() {
        const { watch } = await importCoreReactiveUtils();
        addHandles(this, watch(() => this.widget.submitting, (value) => (this.submitting = value), {
            initial: true,
        }));
    }
    _createParams() {
        const params = {
            container: this.childElem,
        };
        if (this.displayType) {
            params.displayType = this.displayType;
        }
        if (this.graphic) {
            params.graphic = this.graphic;
        }
        if (this.visibleElements) {
            params.visibleElements = this.visibleElements;
        }
        return params;
    }
    get el() { return getElement(this); }
    static get watchers() { return {
        "capabilities": ["capabilitiesWatcher"],
        "displayType": ["displayTypeWatcher"],
        "graphic": ["graphicWatcher"],
        "visibleElements": ["visibleElementsWatcher"]
    }; }
};
ArcgisAttachments.style = attachmentsCss;

export { ArcgisAttachments as arcgis_attachments };
