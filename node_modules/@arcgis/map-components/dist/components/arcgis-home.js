/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
 * v4.30.0-next.37
 */
import { proxyCustomElement, HTMLElement, createEvent, h } from '@stencil/core/internal/client';
import { k as kebabToPascal, c as classes } from './index3.js';
import { p as proxyExports, A as AccessorController, u as useControllerManager, c as useT9n, l as load } from './chunk-WQTCUXBS.js';
import { G as newWidgetsHomeHomeViewModel, i as importCoreReactiveUtils } from './index2.js';
import { c as checkForView, r as referenceElementHelper } from './component-utils.js';
import "@esri/calcite-components/dist/components/calcite-button.js";
import "@esri/calcite-components/dist/components/calcite-loader.js";

const globalCss = {
    anchor: "esri-widget__anchor",
    anchorDisabled: "esri-widget__anchor--disabled",
    button: "esri-button",
    buttonDisabled: "esri-button--disabled",
    buttonHalf: "esri-button--half",
    buttonSecondary: "esri-button--secondary",
    buttonSmall: "esri-button--small",
    buttonTertiary: "esri-button--tertiary",
    buttonThird: "esri-button--third",
    disabled: "esri-disabled",
    disabledElement: "esri-disabled-element",
    empty: "esri-widget__content--empty",
    emptyIllustration: "esri-widget__content-illustration--empty",
    heading: "esri-widget__heading",
    hidden: "esri-hidden",
    input: "esri-input",
    interactive: "esri-interactive",
    loader: "esri-widget__loader",
    loaderAnimation: "esri-widget__loader-animation",
    loaderText: "esri-widget__loader-text",
    menu: "esri-menu",
    menuHeader: "esri-menu__header",
    menuItem: "esri-menu__list-item",
    menuItemActive: "esri-menu__list-item--active",
    menuItemFocus: "esri-menu__list-item--focus",
    menuList: "esri-menu__list",
    noBookmarksIcon: "esri-widget__no-bookmark-icon",
    panel: "esri-widget--panel",
    panelHeightOnly: "esri-widget--panel-height-only",
    primaryTick: "primary-tick",
    primaryTickAmPm: "primary-tick__ampm",
    primaryTickLabel: "primary-tick__label",
    rotating: "esri-rotating",
    secondaryTick: "secondary-tick",
    select: "esri-select",
    table: "esri-widget__table",
    ui: "esri-component",
    widget: "esri-widget",
    widgetButton: "esri-widget--button",
    widgetButtonActive: "esri-widget--button-active",
    widgetDisabled: "esri-widget--disabled",
};

// FIXME: auto-destroy viewModel?
/**
 * A controller for a mapping component that:
 * - loads the viewModel
 * - initializes the viewModel with the component's properties
 * - does two-way binding between view model and component properties
 * - re-emits the viewModel's events on the component
 * - type-checks everything âœ¨
 *
 * Documentation:
 * https://devtopia.esri.com/WebGIS/arcgis-web-components/blob/main/packages/map-components/src/controllers/useViewModel.md
 */
const makeViewModelController = (loadViewModel) => (component) => proxy(component, loadViewModel);
// REFACTOR: extract common logic into IntegrationController???
class ViewModelController extends AccessorController {
    hostConnected() {
        if (this.component.manager.didLoadCalled)
            checkForView(this.component);
    }
    async hostLoad() {
        await super.hostLoad();
        this._watchMetaProperties();
        this._reEmitViewModelEvents();
    }
    // This can't be in hostLoad as childElem is only accessible after first render
    hostLoaded() {
        const { el } = this.component;
        const childNode = el.shadowRoot?.firstChild ?? el.firstChild ?? undefined;
        /*
         * On hot reloading, new this.component instance is created (so properties
         * are reset) but this.component.el instance is preserved (so properties are
         * preserved). Since childElem is re-parented on 1st hostLoad(),
         * for it to be accessible on the 2nd hostLoad() (hot reload), we have to
         * store it's reference on the el, rather than component
         */
        el.childElem = childNode ?? el.childElem;
        this.component.childElem = el.childElem;
        if (el.childElem === undefined && "production" !== "production")
            throw new Error("Unable to find reference to component's root child");
        // Define the "view" property if not already present for compatibility with JS API
        if (!("view" in this.component))
            Object.defineProperty(this.component, "view", {
                get: () => this._instance.view,
                set: (view) => {
                    this._instance.view = view;
                    this.component.requestUpdate();
                },
            });
        checkForView(this.component);
        this.component.arcgisReady.emit();
    }
    _watchMetaProperties() {
        this.watch("position", (position) => {
            if (this.component.el.childElem != null && typeof position === "string")
                this.component.view?.ui.move(this.component.el.childElem, position);
        });
        this.watch("referenceElement", (referenceElement) => void referenceElementHelper(this.component, referenceElement).catch(console.error));
    }
    _reEmitViewModelEvents() {
        const isEvented = "on" in this._instance && typeof this._instance.on === "function";
        if (!isEvented)
            return;
        const eventTarget = this._instance;
        Object.entries(this.component).forEach(([key, unknown]) => {
            const value = unknown;
            if (!key.startsWith("viewModel") ||
                key === "viewModel" ||
                typeof value !== "object" ||
                value === null ||
                !("emit" in value) ||
                typeof value.emit !== "function")
                return;
            const emit = value.emit;
            const trimmedEventName = key.slice("viewModel".length);
            const capitalizedEventName = kebabToPascal(trimmedEventName);
            const eventName = `${capitalizedEventName[0].toLowerCase()}${capitalizedEventName.slice(1)}`;
            this.onLifecycle(() => this.reactiveUtils.on(() => eventTarget, eventName, emit));
        });
    }
    hostDisconnected() {
        if (typeof this.component.el.childElem === "object")
            this.component.view?.ui.remove(this.component.el.childElem);
    }
}
const proxy = proxyExports(ViewModelController);

// TODO: [MIGRATION] migrate tests
const css = {
    base: "esri-home",
};
const useHomeViewModel = makeViewModelController(newWidgetsHomeHomeViewModel);
const __cmpMeta = [0,"arcgis-home",{"goToOverride":[1040],"icon":[1537],"label":[1025],"position":[1537],"referenceElement":[1025,"reference-element"],"viewpoint":[1040],"state":[1537],"cancelGo":[64],"go":[64]}];
const ArcgisHome$1 = /*@__PURE__*/ proxyCustomElement(class ArcgisHome extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
this.constructor.__registerControllers = ()=>__cmpMeta[2]??{};
        this.arcgisReady = createEvent(this, "arcgisReady", 7);
        this.viewModelGo = createEvent(this, "arcgisHomeGo", 7);
        //--------------------------------------------------------------------------
        //
        //  Controllers
        //
        //--------------------------------------------------------------------------
        this.manager = useControllerManager(this);
        this.messages = useT9n();
        this.reactiveUtils = load(importCoreReactiveUtils);
        this.viewModel = useHomeViewModel(this);
        //--------------------------------------------------------------------------
        //
        //  Private Methods
        //
        //--------------------------------------------------------------------------
        this._go = () => {
            const { viewModel } = this;
            if (viewModel.state === "going-home")
                viewModel.cancelGo();
            else
                viewModel.go();
        };
        this.goToOverride = this.viewModel.goToOverride;
        this.icon = "home";
        this.label = undefined;
        this.position = "top-left";
        this.referenceElement = undefined;
        this.viewpoint = this.viewModel.viewpoint;
        this.state = this.viewModel.state;
    }
    //--------------------------------------------------------------------------
    //
    //  Public Methods
    //
    //--------------------------------------------------------------------------
    /**
     * This function provides the ability to interrupt and cancel the process
     * of navigating the view back to the view's initial extent.
     *
     * @since 4.9
     */
    async cancelGo() {
        this.viewModel.cancelGo();
    }
    /**
     * Animates the view to the initial Viewpoint of the view or the
     * value of `viewpoint`
     */
    async go() {
        return this.viewModel.go();
    }
    render() {
        const { messages, icon } = this;
        const state = this.viewModel?.state;
        const isLoading = state === "going-home";
        return (h("div", { class: classes(css.base, globalCss.widget) }, h("calcite-button", { class: globalCss.widgetButton, disabled: state === "disabled", "icon-start": isLoading ? undefined : icon, kind: "neutral", label: messages.componentLabel, onClick: this._go,
            // Workaround for https://github.com/Esri/calcite-design-system/issues/8490
            scale: isLoading ? "s" : "m", title: state === "going-home" ? messages.cancel : messages.title }, isLoading ? (
        // Cannot use calcite-button's loading=true. See https://devtopia.esri.com/WebGIS/arcgis-js-api/pull/58358#discussion_r1106927
        h("calcite-loader", { inline: true, label: "" })) : null)));
    }
    static get assetsDirs() { return ["assets"]; }
    get el() { return this; }
}, __cmpMeta);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["arcgis-home"];
    components.forEach(tagName => { switch (tagName) {
        case "arcgis-home":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ArcgisHome$1);
            }
            break;
    } });
}
defineCustomElement$1();

const ArcgisHome = ArcgisHome$1;
const defineCustomElement = defineCustomElement$1;

export { ArcgisHome, defineCustomElement };
