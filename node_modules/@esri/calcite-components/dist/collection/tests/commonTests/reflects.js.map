{"version":3,"file":"reflects.js","sourceRoot":"","sources":["../../../../src/tests/commonTests/reflects.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,kBAAkB,EAAE,MAAM,UAAU,CAAC;AAC9C,OAAO,EAAE,cAAc,EAAE,MAAM,YAAY,CAAC;AAC5C,OAAO,EAAE,aAAa,EAAE,UAAU,EAAE,MAAM,SAAS,CAAC;AAGpD,MAAM,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC;AAElC;;;;;;;;;;;;;;;;;;;;;;;;;GAyBG;AACH,MAAM,UAAU,QAAQ,CACtB,kBAAsC,EACtC,WAGG;IAEH,MAAM,KAAK,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC,EAAE,YAAY,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC,CAAC;IAElF,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,EAAE,KAAK,EAAE,YAAY,EAAE,KAAK,EAAE,EAAE;QACjD,MAAM,EAAE,IAAI,EAAE,GAAG,EAAE,YAAY,EAAE,GAAG,MAAM,aAAa,CAAC,kBAAkB,CAAC,CAAC;QAC5E,MAAM,cAAc,CAAC,IAAI,CAAC,CAAC;QAC3B,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAE9C,MAAM,QAAQ,GAAG,UAAU,CAAC,YAAY,CAAC,CAAC;QAC1C,MAAM,0BAA0B,GAAG,GAAG,YAAY,IAAI,QAAQ,GAAG,CAAC;QAElE,OAAO,CAAC,WAAW,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;QACzC,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;QAE5B,MAAM,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC,CAAC,UAAU,EAAE,CAAC;QAEjE,IAAI,OAAO,KAAK,KAAK,SAAS,EAAE,CAAC;YAC/B,MAAM,gBAAgB,GAAG,CAAC,SAAkB,EAAiB,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;YACxF,MAAM,OAAO,GAAG,CAAC,KAAK,CAAC;YAEvB,OAAO,CAAC,WAAW,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;YAC3C,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;YAE5B,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAC;YAEvE,OAAO,CAAC,WAAW,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;YACzC,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;YAE5B,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC;QACvE,CAAC;IACH,CAAC,CAAC,CAAC;AACL,CAAC","sourcesContent":["import { toHaveNoViolations } from \"jest-axe\";\nimport { skipAnimations } from \"./../utils\";\nimport { getTagAndPage, propToAttr } from \"./utils\";\nimport { ComponentTestSetup } from \"./interfaces\";\n\nexpect.extend(toHaveNoViolations);\n\n/**\n *\n * Helper for asserting that a component reflects\n *\n * Note that this helper should be used within a describe block.\n *\n * @example\n * describe(\"reflects\", () => {\n *    reflects(\"calcite-action-bar\", [\n *      {\n *        propertyName: \"expandDisabled\",\n *        value: true\n *      },\n *      {\n *        propertyName: \"expanded\",\n *        value: true\n *      }\n *    ])\n * })\n *\n * @param {string} componentTagOrHTML - the component tag or HTML markup to test against\n * @param componentTestSetup\n * @param {object[]} propsToTest - the properties to test\n * @param {string} propsToTest.propertyName - the property name\n * @param {any} propsToTest.value - the property value (if boolean, needs to be `true` to ensure reflection)\n */\nexport function reflects(\n  componentTestSetup: ComponentTestSetup,\n  propsToTest: {\n    propertyName: string;\n    value: any;\n  }[],\n): void {\n  const cases = propsToTest.map(({ propertyName, value }) => [propertyName, value]);\n\n  it.each(cases)(\"%p\", async (propertyName, value) => {\n    const { page, tag: componentTag } = await getTagAndPage(componentTestSetup);\n    await skipAnimations(page);\n    const element = await page.find(componentTag);\n\n    const attrName = propToAttr(propertyName);\n    const componentAttributeSelector = `${componentTag}[${attrName}]`;\n\n    element.setProperty(propertyName, value);\n    await page.waitForChanges();\n\n    expect(await page.find(componentAttributeSelector)).toBeTruthy();\n\n    if (typeof value === \"boolean\") {\n      const getExpectedValue = (propValue: boolean): string | null => (propValue ? \"\" : null);\n      const negated = !value;\n\n      element.setProperty(propertyName, negated);\n      await page.waitForChanges();\n\n      expect(element.getAttribute(attrName)).toBe(getExpectedValue(negated));\n\n      element.setProperty(propertyName, value);\n      await page.waitForChanges();\n\n      expect(element.getAttribute(attrName)).toBe(getExpectedValue(value));\n    }\n  });\n}\n"]}