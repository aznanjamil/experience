{"version":3,"file":"formAssociated.js","sourceRoot":"","sources":["../../../../src/tests/commonTests/formAssociated.ts"],"names":[],"mappings":"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","sourcesContent":["import { E2EElement, E2EPage, EventSpy, newE2EPage } from \"@stencil/core/testing\";\nimport { toHaveNoViolations } from \"jest-axe\";\nimport { KeyInput } from \"puppeteer\";\nimport { html } from \"../../../support/formatting\";\nimport {\n  getClearValidationEventName,\n  hiddenFormInputSlotName,\n  componentsWithInputEvent,\n  ValidationProps,\n  MutableValidityState,\n} from \"../../utils/form\";\nimport { closestElementCrossShadowBoundary } from \"../../utils/dom\";\nimport { GlobalTestProps } from \"./../utils\";\nimport { isHTML, getTag, getTagOrHTMLWithBeforeContent } from \"./utils\";\nimport { TagOrHTMLWithBeforeContent, TagOrHTML } from \"./interfaces\";\n\nexpect.extend(toHaveNoViolations);\n\ninterface FormAssociatedOptions {\n  /**\n   * This value will be set on the component and submitted by the form.\n   */\n  testValue: any;\n\n  /**\n   * Set this if the expected submit value **is different** from stringifying `testValue`.\n   * For example, a component may transform an object to a serializable string.\n   */\n  expectedSubmitValue?: any;\n\n  /*\n   * Set this if the value required to emit an input/change event is different from `testValue`.\n   * The value is passed to `page.keyboard.type()`. For example, input-time-picker requires\n   * appending AM or PM before the value commits and calciteInputTimePickerChange emits.\n   *\n   * This option is only relevant when the `validation` option is enabled.\n   */\n  validUserInputTestValue?: string;\n\n  /*\n   * Set this if emitting an input/change event requires key presses. Each array item will be passed\n   * to `page.keyboard.press()`. For example, the combobox value can be changed by pressing \"Space\"\n   * to open the component and \"Enter\" to select a value.\n   *\n   * This option is only relevant when the `validation` option is enabled.\n   */\n  changeValueKeys?: KeyInput[];\n\n  /**\n   * Specifies the input type that will be used to capture the value.\n   */\n  inputType?: HTMLInputElement[\"type\"];\n\n  /**\n   * Specifies if the component supports submitting the form on Enter key press.\n   */\n  submitsOnEnter?: boolean;\n\n  /**\n   * Specifies if the component supports clearing its value (i.e., setting to null).\n   */\n  clearable?: boolean;\n\n  /**\n   * Specifies if the component supports preventing submission and displaying validation messages.\n   */\n  validation?: boolean;\n}\n\n/**\n * Helper for testing form-associated components; specifically form submitting and resetting.\n *\n * Note that this helper should be used within a describe block.\n *\n * @param {string} componentTagOrHtml - the component tag or HTML markup to test against\n * @param {FormAssociatedOptions} options - form associated options\n */\nexport function formAssociated(\n  componentTagOrHtml: TagOrHTML | TagOrHTMLWithBeforeContent,\n  options: FormAssociatedOptions,\n): void {\n  const inputTypeContext = options?.inputType ? ` (input type=\"${options.inputType}\")` : \"\";\n\n  it(`supports association via ancestry${inputTypeContext}`, () => testAncestorFormAssociated());\n  it(`supports association via form ID${inputTypeContext}`, () => testIdFormAssociated());\n\n  if (options?.validation && ![\"color\", \"month\", \"time\"].includes(options?.inputType)) {\n    it(`supports required property validation${inputTypeContext}`, () => testRequiredPropertyValidation());\n  }\n\n  async function testAncestorFormAssociated(): Promise<void> {\n    const { beforeContent, tagOrHTML } = getTagOrHTMLWithBeforeContent(componentTagOrHtml);\n    const tag = getTag(tagOrHTML);\n    const componentHtml = ensureName(isHTML(tagOrHTML) ? tagOrHTML : `<${tag}></${tag}>`, tag);\n\n    const page = await newE2EPage();\n    await beforeContent?.(page);\n\n    const content = html` <form>\n      ${componentHtml}\n      <!--\n        keeping things simple by using submit-type input\n        this should cover button and calcite-button submit cases\n      -->\n      <input id=\"submitter\" type=\"submit\" />\n    </form>`;\n    await page.setContent(content);\n    await page.waitForChanges();\n    const component = await page.find(tag);\n\n    await assertValueSubmissionType(page, component, options);\n    await assertValueResetOnFormReset(page, component, options);\n    await assertValueSubmittedOnFormSubmit(page, component, options);\n\n    if (options.submitsOnEnter) {\n      await assertFormSubmitOnEnter(page, component, options);\n    }\n  }\n\n  async function testIdFormAssociated(): Promise<void> {\n    const { beforeContent, tagOrHTML } = getTagOrHTMLWithBeforeContent(componentTagOrHtml);\n    const tag = getTag(tagOrHTML);\n    const componentHtml = ensureForm(ensureName(isHTML(tagOrHTML) ? tagOrHTML : `<${tag}></${tag}>`, tag), tag);\n\n    const page = await newE2EPage();\n    await beforeContent?.(page);\n    await page.setContent(\n      html` <form id=\"test-form\"></form>\n        ${componentHtml}\n        <!--\n        keeping things simple by using submit-type input\n        this should cover button and calcite-button submit cases\n        -->\n        <input id=\"submitter\" form=\"test-form\" type=\"submit\" />`,\n    );\n    await page.waitForChanges();\n    const component = await page.find(tag);\n\n    await assertValueSubmissionType(page, component, options);\n    await assertValueResetOnFormReset(page, component, options);\n    await assertValueSubmittedOnFormSubmit(page, component, options);\n\n    if (options.submitsOnEnter) {\n      await assertFormSubmitOnEnter(page, component, options);\n    }\n  }\n\n  async function testRequiredPropertyValidation(): Promise<void> {\n    const { beforeContent, tagOrHTML } = getTagOrHTMLWithBeforeContent(componentTagOrHtml);\n    const tag = getTag(tagOrHTML);\n    const componentHtml = ensureUnchecked(\n      ensureRequired(ensureName(isHTML(tagOrHTML) ? tagOrHTML : `<${tag}></${tag}>`, tag), tag),\n    );\n\n    const page = await newE2EPage();\n    await beforeContent?.(page);\n\n    const content = html`\n      <form>\n        ${componentHtml}\n        <calcite-button id=\"submitButton\" type=\"submit\">Submit</calcite-button>\n      </form>\n    `;\n\n    await page.setContent(content);\n    await page.waitForChanges();\n    const component = await page.find(tag);\n\n    const submitButton = await page.find(\"#submitButton\");\n    const spyEvent = await page.spyOnEvent(getClearValidationEventName(tag));\n    const spyInvalidEvent = await page.spyOnEvent(\"calciteInvalid\");\n\n    const requiredValidationMessage =\n      options?.inputType === \"radio\" ? \"Please select one of these options.\" : \"Please fill out this field.\";\n\n    await assertPreventsFormSubmission(page, component, submitButton, requiredValidationMessage);\n    expect(spyInvalidEvent).toHaveReceivedEventTimes(1);\n    expect(await serializeValidityProperty(page, tag)).toHaveProperty(\"valueMissing\", true);\n\n    await assertClearsValidationOnValueChange(page, component, options, spyEvent, tag);\n    expect(spyInvalidEvent).toHaveReceivedEventTimes(1);\n    expect(await serializeValidityProperty(page, tag)).toHaveProperty(\"valueMissing\", false);\n\n    await assertUserMessageNotOverridden(page, component, submitButton);\n    expect(spyInvalidEvent).toHaveReceivedEventTimes(2);\n    expect(await serializeValidityProperty(page, tag)).toHaveProperty(\"valueMissing\", true);\n  }\n\n  // puppeteer wasn't properly serializing the validity object, so we have to do it manually\n  async function serializeValidityProperty(page: E2EPage, tag: string): Promise<MutableValidityState> {\n    return await page.$eval(tag, (component: HTMLElement) => {\n      const validity = {};\n\n      for (const key in (component as HTMLInputElement).validity) {\n        validity[key] = (component as HTMLInputElement).validity[key];\n      }\n\n      return validity as MutableValidityState;\n    });\n  }\n\n  function ensureName(html: string, componentTag: string): string {\n    return html.includes(\"name=\") ? html : html.replace(componentTag, `${componentTag} name=\"testName\" `);\n  }\n\n  function ensureRequired(html: string, componentTag: string): string {\n    return html.includes(\"required\") ? html : html.replace(componentTag, `${componentTag} required `);\n  }\n\n  function ensureUnchecked(html: string): string {\n    return html.replace(/(checked|selected)/, \"\");\n  }\n\n  function ensureForm(html: string, componentTag: string): string {\n    return html.includes(\"form=\") ? html : html.replace(componentTag, `${componentTag} form=\"test-form\" `);\n  }\n\n  async function isCheckable(page: E2EPage, component: E2EElement, options: FormAssociatedOptions): Promise<boolean> {\n    return (\n      typeof options.testValue === \"boolean\" &&\n      (await page.$eval(component.tagName.toLowerCase(), (component) => \"checked\" in component))\n    );\n  }\n\n  function stringifyTestValue(value: any): string | string[] {\n    return Array.isArray(value) ? value.map((value) => value.toString()) : value.toString();\n  }\n\n  async function assertValueSubmissionType(\n    page: E2EPage,\n    component: E2EElement,\n    options: FormAssociatedOptions,\n  ): Promise<void> {\n    const name = await component.getProperty(\"name\");\n    const inputType = options.inputType ?? \"text\";\n\n    const hiddenFormInputType = await page.evaluate(\n      async (inputName: string, hiddenFormInputSlotName: string): Promise<string> => {\n        const hiddenFormInput = document.querySelector<HTMLInputElement>(\n          `[name=\"${inputName}\"] input[slot=${hiddenFormInputSlotName}]`,\n        );\n\n        return hiddenFormInput.type;\n      },\n      name,\n      hiddenFormInputSlotName,\n    );\n\n    if (await isCheckable(page, component, options)) {\n      expect(hiddenFormInputType).toMatch(/radio|checkbox/);\n    } else {\n      expect(hiddenFormInputType).toMatch(inputType);\n    }\n  }\n\n  async function assertValueResetOnFormReset(\n    page: E2EPage,\n    component: E2EElement,\n    options: FormAssociatedOptions,\n  ): Promise<void> {\n    const resettablePropName = (await isCheckable(page, component, options)) ? \"checked\" : \"value\";\n    const initialValue = await component.getProperty(resettablePropName);\n    component.setProperty(resettablePropName, options.testValue);\n    await page.waitForChanges();\n\n    await page.$eval(\"form\", (form: HTMLFormElement) => form.reset());\n    await page.waitForChanges();\n\n    expect(await component.getProperty(resettablePropName)).toBe(initialValue);\n  }\n\n  async function assertValueSubmittedOnFormSubmit(\n    page: E2EPage,\n    component: E2EElement,\n    options: FormAssociatedOptions,\n  ): Promise<void> {\n    const stringifiedTestValue = stringifyTestValue(options.testValue);\n    const name = await component.getProperty(\"name\");\n\n    if (await isCheckable(page, component, options)) {\n      component.setProperty(\"checked\", true);\n      await page.waitForChanges();\n      expect(await submitAndGetValue()).toEqual(\"on\");\n\n      component.setProperty(\"value\", options.testValue);\n      await page.waitForChanges();\n      expect(await submitAndGetValue()).toEqual(stringifiedTestValue);\n\n      component.setProperty(\"disabled\", true);\n      await page.waitForChanges();\n      expect(await submitAndGetValue()).toBe(null);\n\n      component.setProperty(\"checked\", true);\n      component.setProperty(\"disabled\", false);\n      await page.waitForChanges();\n      expect(await submitAndGetValue()).toEqual(stringifiedTestValue);\n\n      component.setProperty(\"checked\", false);\n      await page.waitForChanges();\n      expect(await submitAndGetValue()).toBe(null);\n    } else {\n      if (options.clearable) {\n        component.setProperty(\"required\", true);\n        component.setProperty(\"value\", null);\n        await page.waitForChanges();\n        expect(await submitAndGetValue()).toBe(\n          options.inputType === \"color\"\n            ? // `input[type=\"color\"]` will set its value to #000000 when set to an invalid value\n              // see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/color#value\n              \"#000\"\n            : undefined,\n        );\n\n        component.setProperty(\"required\", false);\n        component.setProperty(\"value\", options.testValue);\n        await page.waitForChanges();\n        expect(await submitAndGetValue()).toEqual(options?.expectedSubmitValue || stringifiedTestValue);\n      }\n\n      component.setProperty(\"disabled\", true);\n      await page.waitForChanges();\n      expect(await submitAndGetValue()).toBe(null);\n\n      component.setProperty(\"disabled\", false);\n      component.setProperty(\"value\", options.testValue);\n      await page.waitForChanges();\n      expect(await submitAndGetValue()).toEqual(options?.expectedSubmitValue || stringifiedTestValue);\n\n      component.setProperty(\"value\", options.testValue);\n      await page.waitForChanges();\n      expect(await submitAndGetValue()).toEqual(options?.expectedSubmitValue || stringifiedTestValue);\n    }\n\n    type SubmitValueResult = ReturnType<FormData[\"get\"]> | ReturnType<FormData[\"getAll\"] | undefined>;\n\n    /**\n     * This method will submit the form and return the submitted value:\n     *\n     * For single-value components, it will return a string or null if the value was not submitted\n     * For multi-value components, it will return an array of strings\n     *\n     * If the input cannot be submitted because it is invalid, undefined will be returned\n     */\n    async function submitAndGetValue(): Promise<SubmitValueResult> {\n      return page.$eval(\n        \"form\",\n        async (\n          form: HTMLFormElement,\n          inputName: string,\n          hiddenFormInputSlotName: string,\n        ): Promise<SubmitValueResult> => {\n          const hiddenFormInput = document.querySelector(\n            `[name=\"${inputName}\"] input[slot=${hiddenFormInputSlotName}]`,\n          );\n\n          let resolve: (value: SubmitValueResult) => void;\n          const submitPromise = new Promise<SubmitValueResult>((yes) => (resolve = yes));\n\n          function handleFormSubmit(event: Event): void {\n            event.preventDefault();\n            const formData = new FormData(form);\n            const values = formData.getAll(inputName);\n\n            if (values.length > 1) {\n              resolve(values as string[]);\n              return;\n            }\n\n            resolve(formData.get(inputName));\n            hiddenFormInput.removeEventListener(\"invalid\", handleInvalidInput);\n          }\n\n          function handleInvalidInput(): void {\n            resolve(undefined);\n            form.removeEventListener(\"submit\", handleFormSubmit);\n          }\n\n          form.addEventListener(\"submit\", handleFormSubmit, { once: true });\n          hiddenFormInput.addEventListener(\"invalid\", handleInvalidInput, { once: true });\n\n          document.querySelector<HTMLInputElement>(\"#submitter\").click();\n\n          return submitPromise;\n        },\n        name,\n        hiddenFormInputSlotName,\n      );\n    }\n  }\n\n  async function assertFormSubmitOnEnter(\n    page: E2EPage,\n    component: E2EElement,\n    options: FormAssociatedOptions,\n  ): Promise<void> {\n    type TestWindow = GlobalTestProps<{\n      called: boolean;\n    }>;\n\n    await page.$eval(\"form\", (form: HTMLFormElement) => {\n      form.addEventListener(\"submit\", (event) => {\n        event.preventDefault();\n        (window as TestWindow).called = true;\n      });\n    });\n\n    const stringifiedTestValue = stringifyTestValue(options.testValue);\n\n    component.setProperty(\"value\", stringifiedTestValue);\n    await component.callMethod(\"setFocus\");\n    await page.keyboard.press(\"Enter\");\n    const called = await page.evaluate(() => (window as TestWindow).called);\n\n    expect(called).toBe(true);\n  }\n\n  async function assertPreventsFormSubmission(\n    page: E2EPage,\n    component: E2EElement,\n    submitButton: E2EElement,\n    message: string,\n  ) {\n    await submitButton.click();\n    await page.waitForChanges();\n\n    await expectValidationProps(page, component, { message, icon: \"\", status: \"invalid\" });\n  }\n\n  async function assertClearsValidationOnValueChange(\n    page: E2EPage,\n    component: E2EElement,\n    options: FormAssociatedOptions,\n    event: EventSpy,\n    tag: string,\n  ) {\n    if (options?.changeValueKeys) {\n      for (const key of options.changeValueKeys) {\n        await page.keyboard.press(key);\n      }\n    } else {\n      await page.keyboard.type(options?.validUserInputTestValue ?? options.testValue);\n      await page.keyboard.press(\"Tab\");\n    }\n\n    await page.waitForChanges();\n\n    // components with an Input event will emit multiple times depending on the length of testValue\n    if (componentsWithInputEvent.includes(tag)) {\n      expect(event.length).toBeGreaterThanOrEqual(1);\n    } else {\n      expect(event).toHaveReceivedEventTimes(1);\n    }\n\n    await expectValidationProps(page, component);\n  }\n\n  async function assertUserMessageNotOverridden(page: E2EPage, component: E2EElement, submitButton: E2EElement) {\n    const customValidationMessage = \"This is a custom message.\";\n    const customValidationIcon = \"banana\";\n\n    // don't override custom validation message and icon\n    component.setProperty(\"validationMessage\", customValidationMessage);\n    component.setProperty(\"validationIcon\", customValidationIcon);\n    component.setProperty(\"value\", undefined);\n    await page.waitForChanges();\n\n    await submitButton.click();\n    await page.waitForChanges();\n\n    await expectValidationProps(page, component, {\n      message: customValidationMessage,\n      icon: customValidationIcon,\n      status: \"invalid\",\n    });\n  }\n\n  async function expectValidationProps(page: E2EPage, element: E2EElement, validationProps?: ValidationProps) {\n    let testProps = validationProps;\n\n    // radio-button is formAssociated, but the validation props are on the parent group\n    if (element.nodeName === \"CALCITE-RADIO-BUTTON\") {\n      element.setProperty(\"id\", \"radio-button\");\n      await page.waitForChanges();\n      testProps = await page.evaluate(() => {\n        const groupEl = closestElementCrossShadowBoundary<HTMLCalciteRadioButtonGroupElement>(\n          document.querySelector(\"#radio-button\"),\n          \"calcite-radio-button-group\",\n        );\n\n        return {\n          message: groupEl.validationMessage,\n          icon: groupEl.validationIcon,\n          status: groupEl.status,\n        };\n      });\n    }\n\n    expect(await element.getProperty(\"status\")).toBe(testProps?.status ?? \"idle\");\n    expect(await element.getProperty(\"validationMessage\")).toBe(testProps?.message ?? \"\");\n    expect(element.getAttribute(\"validation-icon\")).toBe(testProps?.icon ?? null);\n  }\n}\n"]}