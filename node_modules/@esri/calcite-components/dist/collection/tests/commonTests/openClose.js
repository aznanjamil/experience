/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.
 * v2.8.5
 */
import { toHaveNoViolations } from "jest-axe";
import { newProgrammaticE2EPage, skipAnimations } from "../utils";
import { getTag, simplePageSetup } from "./utils";
expect.extend(toHaveNoViolations);
/**
 * Helper to test openClose component setup.
 *
 * Note that this helper should be used within a `describe` block.
 *
 * @example
 *
 * describe("openClose", () => {
 *   openClose("calcite-combobox opened with a tab", {
 *     beforeToggle: {
 *        open: async (page) => {
 *            await page.keyboard.press("Tab");
 *            await page.waitForChanges();
 *        },
 *        close: async (page) => {
 *            await page.keyboard.press("Tab");
 *            await page.waitForChanges();
 *        },
 *      }
 *   });
 *
 *  openClose("open calcite-combobox closed with a tab", {
 *        initialToggleValue: true,
 *        beforeToggle: {
 *          close: async (page) => {
 *            await page.keyboard.press("Tab");
 *            await page.waitForChanges();
 *        },
 *      }
 *    }
 * })
 *
 * @param componentTagOrHTML - The component tag or HTML markup to test against.
 * @param {object} [options] - Additional options to assert.
 */
export function openClose(componentTagOrHTML, options) {
    const defaultOptions = {
        initialToggleValue: false,
        openPropName: "open",
    };
    const customizedOptions = { ...defaultOptions, ...options };
    const eventSequence = setUpEventSequence(componentTagOrHTML);
    function setUpEventSequence(componentTagOrHTML) {
        const tag = getTag(componentTagOrHTML);
        const camelCaseTag = tag.replace(/-([a-z])/g, (lettersAfterHyphen) => lettersAfterHyphen[1].toUpperCase());
        const eventSuffixes = [`BeforeOpen`, `Open`, `BeforeClose`, `Close`];
        return eventSuffixes.map((suffix) => `${camelCaseTag}${suffix}`);
    }
    async function setUpPage(componentTagOrHTML, page) {
        await page.evaluate((eventSequence, initialToggleValue, openPropName, componentTagOrHTML) => {
            const receivedEvents = [];
            window.events = receivedEvents;
            eventSequence.forEach((eventType) => {
                document.addEventListener(eventType, (event) => receivedEvents.push(event.type));
            });
            if (!initialToggleValue) {
                return;
            }
            const component = document.createElement(componentTagOrHTML);
            component[openPropName] = true;
            document.body.append(component);
        }, eventSequence, customizedOptions.initialToggleValue, customizedOptions.openPropName, componentTagOrHTML);
    }
    async function testOpenCloseEvents(componentTagOrHTML, page) {
        const tag = getTag(componentTagOrHTML);
        const element = await page.find(tag);
        const [beforeOpenEvent, openEvent, beforeCloseEvent, closeEvent] = eventSequence.map((event) => page.waitForEvent(event));
        const [beforeOpenSpy, openSpy, beforeCloseSpy, closeSpy] = await Promise.all(eventSequence.map(async (event) => await element.spyOnEvent(event)));
        await page.waitForChanges();
        if (customizedOptions.beforeToggle) {
            await customizedOptions.beforeToggle.open(page);
        }
        else {
            element.setProperty(customizedOptions.openPropName, true);
        }
        await page.waitForChanges();
        await beforeOpenEvent;
        await openEvent;
        expect(beforeOpenSpy).toHaveReceivedEventTimes(1);
        expect(openSpy).toHaveReceivedEventTimes(1);
        expect(beforeCloseSpy).toHaveReceivedEventTimes(0);
        expect(closeSpy).toHaveReceivedEventTimes(0);
        if (customizedOptions.beforeToggle) {
            await customizedOptions.beforeToggle.close(page);
        }
        else {
            element.setProperty(customizedOptions.openPropName, false);
        }
        await page.waitForChanges();
        await beforeCloseEvent;
        await closeEvent;
        expect(beforeCloseSpy).toHaveReceivedEventTimes(1);
        expect(closeSpy).toHaveReceivedEventTimes(1);
        expect(beforeOpenSpy).toHaveReceivedEventTimes(1);
        expect(openSpy).toHaveReceivedEventTimes(1);
        expect(await page.evaluate(() => window.events)).toEqual(eventSequence);
    }
    /**
     * `skipAnimations` utility sets the animation duration to 0.01. This is a workaround for an issue with the animation utility.
     * Because this still leaves a very small duration, we can still test the animation events, but faster.
     */
    if (customizedOptions.initialToggleValue === true) {
        it("emits on initialization with animations enabled", async () => {
            const page = await newProgrammaticE2EPage();
            await skipAnimations(page);
            await setUpPage(componentTagOrHTML, page);
            await testOpenCloseEvents(componentTagOrHTML, page);
        });
        it("emits on initialization with animations disabled", async () => {
            const page = await newProgrammaticE2EPage();
            await page.addStyleTag({
                content: `:root { --calcite-duration-factor: 0; }`,
            });
            await setUpPage(componentTagOrHTML, page);
            await testOpenCloseEvents(componentTagOrHTML, page);
        });
    }
    else {
        it(`emits with animations enabled`, async () => {
            const page = await simplePageSetup(componentTagOrHTML);
            await skipAnimations(page);
            await setUpPage(componentTagOrHTML, page);
            await testOpenCloseEvents(componentTagOrHTML, page);
        });
        it(`emits with animations disabled`, async () => {
            const page = await simplePageSetup(componentTagOrHTML);
            await page.addStyleTag({
                content: `:root { --calcite-duration-factor: 0; }`,
            });
            await setUpPage(componentTagOrHTML, page);
            await testOpenCloseEvents(componentTagOrHTML, page);
        });
    }
}
//# sourceMappingURL=openClose.js.map
