/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.
 * v2.8.5
 */
import { toHaveNoViolations } from "jest-axe";
import { getTagAndPage } from "./utils";
expect.extend(toHaveNoViolations);
/**
 * Helper for asserting that a component is focusable
 *
 * Note that this helper should be used within a describe block.
 *
 * @example
 * describe("is focusable", () => {
 *    focusable(`calcite-input-number`, { shadowFocusTargetSelector: "input" })
 * });
 *
 * @param {string} componentTagOrHTML - the component tag or HTML markup to test against
 * @param componentTestSetup
 * @param {FocusableOptions} [options] - additional options for asserting focus
 */
export function focusable(componentTestSetup, options) {
    it("is focusable", async () => {
        const { page, tag } = await getTagAndPage(componentTestSetup);
        const element = await page.find(tag);
        const focusTargetSelector = options?.focusTargetSelector || tag;
        await element.callMethod("setFocus", options?.focusId); // assumes element is FocusableElement
        if (options?.shadowFocusTargetSelector) {
            expect(await page.$eval(tag, (element, selector) => element.shadowRoot.activeElement?.matches(selector), options?.shadowFocusTargetSelector)).toBe(true);
        }
        // wait for next frame before checking focus
        await page.waitForChanges();
        expect(await page.evaluate((selector) => document.activeElement?.matches(selector), focusTargetSelector)).toBe(true);
    });
}
//# sourceMappingURL=focusable.js.map
