{"version":3,"file":"slots.js","sourceRoot":"","sources":["../../../../src/tests/commonTests/slots.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,kBAAkB,EAAE,MAAM,UAAU,CAAC;AAC9C,OAAO,EAAE,MAAM,EAAE,eAAe,EAAE,MAAM,SAAS,CAAC;AAGlD,MAAM,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC;AAElC;;;;;;;;;;;;;GAaG;AACH,MAAM,UAAU,KAAK,CACnB,kBAA6B,EAC7B,KAAwC,EACxC,kBAAkB,GAAG,KAAK;IAE1B,EAAE,CAAC,WAAW,EAAE,KAAK,IAAI,EAAE;QACzB,MAAM,IAAI,GAAG,MAAM,eAAe,CAAC,kBAAkB,CAAC,CAAC;QACvD,MAAM,GAAG,GAAG,MAAM,CAAC,kBAAkB,CAAC,CAAC;QACvC,MAAM,SAAS,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAEtE,MAAM,IAAI,CAAC,KAAK,CACd,GAAG,EACH,KAAK,EAAE,SAAS,EAAE,SAAmB,EAAE,kBAA4B,EAAE,EAAE;YACrE,KAAK,UAAU,eAAe,CAAC,SAAiB,EAAE,QAAiB;gBACjE,MAAM,EAAE,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,iDAAiD;gBAC3F,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;gBAE5B,IAAI,QAAQ,EAAE,CAAC;oBACb,EAAE,CAAC,IAAI,GAAG,QAAQ,CAAC;gBACrB,CAAC;gBAED,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;gBACrB,MAAM,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,EAAE,CAAC,qBAAqB,CAAC,GAAG,EAAE,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;YAC/E,CAAC;YAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gBAC1C,MAAM,eAAe,CAAC,yBAAyB,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;YACjE,CAAC;YAED,IAAI,kBAAkB,EAAE,CAAC;gBACvB,MAAM,eAAe,CAAC,2BAA2B,CAAC,CAAC;YACrD,CAAC;QACH,CAAC,EACD,SAAS,EACT,kBAAkB,CACnB,CAAC;QAEF,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;QAE5B,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,CACvC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,0BAA0B,CAAC,CAAC;aAC9D,MAAM,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,YAAY,CAAC;aACzC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAClC,CAAC;QAEF,MAAM,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAEnC,IAAI,kBAAkB,EAAE,CAAC;YACvB,MAAM,iBAAiB,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE;gBACjD,MAAM,cAAc,GAAG,QAAQ,CAAC,aAAa,CAAC,4BAA4B,CAAC,CAAC;gBAC5E,OAAO,cAAc,CAAC,YAAY,EAAE,IAAI,KAAK,EAAE,IAAI,cAAc,CAAC,IAAI,KAAK,EAAE,CAAC;YAChF,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,iBAAiB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACvC,CAAC;IACH,CAAC,CAAC,CAAC;AACL,CAAC","sourcesContent":["import { toHaveNoViolations } from \"jest-axe\";\nimport { getTag, simplePageSetup } from \"./utils\";\nimport { TagOrHTML } from \"./interfaces\";\n\nexpect.extend(toHaveNoViolations);\n\n/**\n * Helper for asserting slots.\n *\n * Note that this helper should be used within a describe block.\n *\n * @example\n * describe(\"slots\", () => {\n *    slots(\"calcite-stack\", SLOTS)\n * })\n *\n * @param {string} componentTagOrHTML - The component tag or HTML markup to test against.\n * @param {Record<string, string> | string[]} slots - A component's SLOTS resource object or an array of slot names.\n * @param {boolean} includeDefaultSlot - When true, it will run assertions on the default slot.\n */\nexport function slots(\n  componentTagOrHTML: TagOrHTML,\n  slots: Record<string, string> | string[],\n  includeDefaultSlot = false,\n): void {\n  it(\"has slots\", async () => {\n    const page = await simplePageSetup(componentTagOrHTML);\n    const tag = getTag(componentTagOrHTML);\n    const slotNames = Array.isArray(slots) ? slots : Object.values(slots);\n\n    await page.$eval(\n      tag,\n      async (component, slotNames: string[], includeDefaultSlot?: boolean) => {\n        async function slotTestElement(testClass: string, slotName?: string): Promise<void> {\n          const el = document.createElement(\"div\"); // slotting a <div> will suffice for our purposes\n          el.classList.add(testClass);\n\n          if (slotName) {\n            el.slot = slotName;\n          }\n\n          component.append(el);\n          await new Promise<void>((resolve) => requestAnimationFrame(() => resolve()));\n        }\n\n        for (let i = 0; i < slotNames.length; i++) {\n          await slotTestElement(\"slotted-into-named-slot\", slotNames[i]);\n        }\n\n        if (includeDefaultSlot) {\n          await slotTestElement(\"slotted-into-default-slot\");\n        }\n      },\n      slotNames,\n      includeDefaultSlot,\n    );\n\n    await page.waitForChanges();\n\n    const slotted = await page.evaluate(() =>\n      Array.from(document.querySelectorAll(\".slotted-into-named-slot\"))\n        .filter((slotted) => slotted.assignedSlot)\n        .map((slotted) => slotted.slot),\n    );\n\n    expect(slotNames).toEqual(slotted);\n\n    if (includeDefaultSlot) {\n      const hasDefaultSlotted = await page.evaluate(() => {\n        const defaultSlotted = document.querySelector(\".slotted-into-default-slot\");\n        return defaultSlotted.assignedSlot?.name === \"\" && defaultSlotted.slot === \"\";\n      });\n\n      expect(hasDefaultSlotted).toBe(true);\n    }\n  });\n}\n"]}