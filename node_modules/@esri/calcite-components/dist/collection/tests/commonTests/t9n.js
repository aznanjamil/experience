/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.
 * v2.8.5
 */
import { toHaveNoViolations } from "jest-axe";
import { getTagAndPage } from "./utils";
expect.extend(toHaveNoViolations);
/**
 * Helper to test t9n component setup.
 *
 * Note that this helper should be used within a describe block.
 *
 * @example
 * describe("translation support", () => {
 *   t9n("calcite-action");
 * });
 *
 * @param {ComponentTestSetup} componentTestSetup - A component tag, html, or the tag and e2e page for setting up a test.
 */
export async function t9n(componentTestSetup) {
    let component;
    let page;
    let getCurrentMessages;
    beforeEach(async () => {
        const { page: e2ePage, tag } = await getTagAndPage(componentTestSetup);
        page = e2ePage;
        component = await page.find(tag);
        getCurrentMessages = async () => {
            return page.$eval(tag, (component) => component.messages);
        };
    });
    it("has defined default messages", async () => await assertDefaultMessages());
    it("overrides messages", async () => await assertOverrides());
    it("switches messages", async () => await assertLangSwitch());
    async function assertDefaultMessages() {
        expect(await getCurrentMessages()).toBeDefined();
    }
    async function assertOverrides() {
        const messages = await getCurrentMessages();
        const firstMessageProp = Object.keys(messages)[0];
        const messageOverride = { [firstMessageProp]: "override test" };
        component.setProperty("messageOverrides", messageOverride);
        await page.waitForChanges();
        expect(await getCurrentMessages()).toEqual({
            ...messages,
            ...messageOverride,
        });
        // reset test changes
        component.setProperty("messageOverrides", undefined);
        await page.waitForChanges();
    }
    async function assertLangSwitch() {
        const enMessages = await getCurrentMessages();
        const fakeBundleIdentifier = "__fake__";
        await page.evaluate((enMessages, fakeBundleIdentifier) => {
            const orig = window.fetch;
            window.fetch = async function (input, init) {
                if (typeof input === "string" && input.endsWith("messages_es.json")) {
                    const fakeEsMessages = {
                        ...enMessages, // reuse real message bundle in case component rendering depends on strings
                        [fakeBundleIdentifier]: true, // we inject a fake identifier for assertion-purposes
                    };
                    window.fetch = orig;
                    return new Response(new Blob([JSON.stringify(fakeEsMessages, null, 2)], { type: "application/json" }));
                }
                return orig.call(input, init);
            };
        }, enMessages, fakeBundleIdentifier);
        component.setAttribute("lang", "es");
        await page.waitForChanges();
        await page.waitForTimeout(3000);
        const esMessages = await getCurrentMessages();
        expect(esMessages).toHaveProperty(fakeBundleIdentifier);
        // reset test changes
        component.removeAttribute("lang");
        await page.waitForChanges();
    }
}
//# sourceMappingURL=t9n.js.map
