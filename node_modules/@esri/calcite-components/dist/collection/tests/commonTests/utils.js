/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.
 * v2.8.5
 */
import { newE2EPage } from "@stencil/core/testing";
import { toHaveNoViolations } from "jest-axe";
import { config } from "../../../stencil.config";
expect.extend(toHaveNoViolations);
export const HYDRATED_ATTR = config.hydratedFlag?.name;
export function isHTML(tagOrHTML) {
    return tagOrHTML.trim().startsWith("<");
}
export function getTag(tagOrHTML) {
    if (isHTML(tagOrHTML)) {
        const calciteTagRegex = /<calcite-[a-z0-9-]+/i;
        const trimmedTag = tagOrHTML.trim();
        const calciteTagMatchResult = trimmedTag.match(calciteTagRegex);
        if (calciteTagMatchResult) {
            return calciteTagMatchResult[0].substring(1);
        }
        throw new Error(`Could not extract tag from HTML: ${trimmedTag}`);
    }
    return tagOrHTML;
}
export async function simplePageSetup(componentTagOrHTML) {
    const componentTag = getTag(componentTagOrHTML);
    const page = await newE2EPage({
        html: isHTML(componentTagOrHTML) ? componentTagOrHTML : `<${componentTag}></${componentTag}>`,
        failOnConsoleError: true,
    });
    await page.waitForChanges();
    return page;
}
export async function getTagAndPage(componentTestSetup) {
    if (typeof componentTestSetup === "function") {
        componentTestSetup = await componentTestSetup();
    }
    if (typeof componentTestSetup === "string") {
        const page = await simplePageSetup(componentTestSetup);
        const tag = getTag(componentTestSetup);
        return { page, tag };
    }
    return componentTestSetup;
}
export function getTagOrHTMLWithBeforeContent(componentTestSetup) {
    if (typeof componentTestSetup === "string") {
        return { tagOrHTML: componentTestSetup };
    }
    return {
        tagOrHTML: componentTestSetup.tagOrHTML,
        beforeContent: componentTestSetup.beforeContent,
    };
}
export function propToAttr(name) {
    return name.replace(/([a-z0-9])([A-Z])/g, "$1-$2").toLowerCase();
}
//# sourceMappingURL=utils.js.map
