/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.
 * v2.8.5
 */
import { h, } from "@stencil/core";
import { connectInteractive, disconnectInteractive, InteractiveContainer, updateHostInteraction, } from "../../utils/interactive";
import { createObserver } from "../../utils/observers";
import { focusElementInGroup } from "../../utils/dom";
import { CSS } from "./resources";
/**
 * @slot - A slot for adding `calcite-tile` elements.
 */
export class TileGroup {
    constructor() {
        this.items = [];
        //--------------------------------------------------------------------------
        //
        //  Private Methods
        //
        //--------------------------------------------------------------------------
        this.getSlottedTiles = () => {
            return this.slotEl
                ?.assignedElements({ flatten: true })
                .filter((el) => el?.matches("calcite-tile"));
        };
        this.mutationObserver = createObserver("mutation", () => this.updateTiles());
        this.selectItem = (item) => {
            if (!item) {
                return;
            }
            this.items?.forEach((el) => {
                const matchingEl = item === el;
                switch (this.selectionMode) {
                    case "multiple":
                        if (matchingEl) {
                            el.selected = !el.selected;
                        }
                        break;
                    case "single":
                        el.selected = matchingEl && !el.selected;
                        break;
                    case "single-persist":
                        el.selected = !!matchingEl;
                        break;
                }
            });
            this.updateSelectedItems();
            this.calciteTileGroupSelect.emit();
        };
        this.setSlotEl = (el) => {
            this.slotEl = el;
        };
        this.updateSelectedItems = () => {
            this.selectedItems = this.items?.filter((el) => el.selected);
        };
        this.updateTiles = () => {
            this.items = this.getSlottedTiles();
            this.items?.forEach((el) => {
                el.interactive = true;
                el.layout = this.layout;
                el.scale = this.scale;
                el.selectionAppearance = this.selectionAppearance;
                el.selectionMode = this.selectionMode;
            });
            this.updateSelectedItems();
        };
        this.disabled = false;
        this.label = undefined;
        this.layout = "horizontal";
        this.scale = "m";
        this.selectedItems = [];
        this.selectionAppearance = "icon";
        this.selectionMode = "none";
    }
    scaleWatcher() {
        this.updateTiles();
    }
    handleSelectionModeOrAppearanceChange() {
        this.updateTiles();
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    connectedCallback() {
        connectInteractive(this);
        this.mutationObserver?.observe(this.el, { childList: true });
        this.updateTiles();
    }
    componentDidRender() {
        updateHostInteraction(this);
    }
    disconnectedCallback() {
        disconnectInteractive(this);
        this.mutationObserver?.disconnect();
    }
    //--------------------------------------------------------------------------
    //
    //  Event Listeners
    //
    //--------------------------------------------------------------------------
    calciteInternalTileKeyEventListener(event) {
        if (event.composedPath().includes(this.el)) {
            event.preventDefault();
            event.stopPropagation();
            const interactiveItems = this.items?.filter((el) => !el.disabled);
            switch (event.detail.key) {
                case "ArrowDown":
                case "ArrowRight":
                    focusElementInGroup(interactiveItems, event.detail.target, "next");
                    break;
                case "ArrowUp":
                case "ArrowLeft":
                    focusElementInGroup(interactiveItems, event.detail.target, "previous");
                    break;
                case "Home":
                    focusElementInGroup(interactiveItems, event.detail.target, "first");
                    break;
                case "End":
                    focusElementInGroup(interactiveItems, event.detail.target, "last");
                    break;
            }
        }
    }
    calciteTileSelectHandler(event) {
        if (event.composedPath().includes(this.el)) {
            this.selectItem(event.target);
        }
    }
    //--------------------------------------------------------------------------
    //
    //  Render Methods
    //
    //--------------------------------------------------------------------------
    render() {
        const role = this.selectionMode === "none" || this.selectionMode === "multiple" ? "group" : "radiogroup";
        return (h(InteractiveContainer, { key: 'c110d46fa4746db6ea85f59b63e0180c16ab5430', disabled: this.disabled }, h("div", { key: 'a72b6f20351cefc6558b63cd695914feaa7a770c', "aria-label": this.label, class: CSS.container, role: role }, h("slot", { key: 'd4fb2bbb7c8a2aa71aba9949681c6628fb69e7cd', onSlotchange: this.updateTiles,
            // eslint-disable-next-line react/jsx-sort-props -- auto-generated by @esri/calcite-components/enforce-ref-last-prop
            ref: this.setSlotEl }))));
    }
    static get is() { return "calcite-tile-group"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["tile-group.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["tile-group.css"]
        };
    }
    static get properties() {
        return {
            "disabled": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "When `true`, interaction is prevented and the component is displayed with lower opacity."
                },
                "attribute": "disabled",
                "reflect": true,
                "defaultValue": "false"
            },
            "label": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": true,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Accessible name for the component."
                },
                "attribute": "label",
                "reflect": false
            },
            "layout": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "Exclude<Layout, \"grid\">",
                    "resolved": "\"horizontal\" | \"vertical\"",
                    "references": {
                        "Exclude": {
                            "location": "global",
                            "id": "global::Exclude"
                        },
                        "Layout": {
                            "location": "import",
                            "path": "../interfaces",
                            "id": "src/components/interfaces.ts::Layout"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Defines the layout of the component.\n\nUse `\"horizontal\"` for rows, and `\"vertical\"` for a single column."
                },
                "attribute": "layout",
                "reflect": true,
                "defaultValue": "\"horizontal\""
            },
            "scale": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "Scale",
                    "resolved": "\"l\" | \"m\" | \"s\"",
                    "references": {
                        "Scale": {
                            "location": "import",
                            "path": "../interfaces",
                            "id": "src/components/interfaces.ts::Scale"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specifies the size of the component."
                },
                "attribute": "scale",
                "reflect": true,
                "defaultValue": "\"m\""
            },
            "selectedItems": {
                "type": "unknown",
                "mutable": true,
                "complexType": {
                    "original": "HTMLCalciteTileElement[]",
                    "resolved": "HTMLCalciteTileElement[]",
                    "references": {
                        "HTMLCalciteTileElement": {
                            "location": "global",
                            "id": "global::HTMLCalciteTileElement"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "readonly",
                            "text": undefined
                        }],
                    "text": "Specifies the component's selected items."
                },
                "defaultValue": "[]"
            },
            "selectionAppearance": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "SelectionAppearance",
                    "resolved": "\"border\" | \"icon\"",
                    "references": {
                        "SelectionAppearance": {
                            "location": "import",
                            "path": "../interfaces",
                            "id": "src/components/interfaces.ts::SelectionAppearance"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specifies the selection appearance, where:\n\n- `\"icon\"` (displays a checkmark or dot), or\n- `\"border\"` (displays a border)."
                },
                "attribute": "selection-appearance",
                "reflect": true,
                "defaultValue": "\"icon\""
            },
            "selectionMode": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "Extract<\n    \"multiple\" | \"none\" | \"single\" | \"single-persist\",\n    SelectionMode\n  >",
                    "resolved": "\"multiple\" | \"none\" | \"single\" | \"single-persist\"",
                    "references": {
                        "Extract": {
                            "location": "global",
                            "id": "global::Extract"
                        },
                        "SelectionMode": {
                            "location": "import",
                            "path": "../interfaces",
                            "id": "src/components/interfaces.ts::SelectionMode"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specifies the selection mode, where:\n\n- `\"multiple\"` (allows any number of selected items),\n- `\"single\"` (allows only one selected item),\n- `\"single-persist\"` (allows only one selected item and prevents de-selection),\n- `\"none\"` (allows no selected items)."
                },
                "attribute": "selection-mode",
                "reflect": true,
                "defaultValue": "\"none\""
            }
        };
    }
    static get events() {
        return [{
                "method": "calciteTileGroupSelect",
                "name": "calciteTileGroupSelect",
                "bubbles": true,
                "cancelable": false,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Fires when the component's selection changes."
                },
                "complexType": {
                    "original": "void",
                    "resolved": "void",
                    "references": {}
                }
            }];
    }
    static get elementRef() { return "el"; }
    static get watchers() {
        return [{
                "propName": "scale",
                "methodName": "scaleWatcher"
            }, {
                "propName": "selectionMode",
                "methodName": "handleSelectionModeOrAppearanceChange"
            }, {
                "propName": "selectionAppearance",
                "methodName": "handleSelectionModeOrAppearanceChange"
            }];
    }
    static get listeners() {
        return [{
                "name": "calciteInternalTileKeyEvent",
                "method": "calciteInternalTileKeyEventListener",
                "target": undefined,
                "capture": false,
                "passive": false
            }, {
                "name": "calciteTileSelect",
                "method": "calciteTileSelectHandler",
                "target": undefined,
                "capture": false,
                "passive": false
            }];
    }
}
//# sourceMappingURL=tile-group.js.map
