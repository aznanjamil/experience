/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.
 * v2.8.5
 */
import { h, Host } from "@stencil/core";
import { guid } from "../../utils/guid";
export class Loader {
    constructor() {
        this.inline = false;
        this.label = undefined;
        this.scale = "m";
        this.type = undefined;
        this.value = 0;
        this.text = "";
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    render() {
        const { el, inline, label, scale, text, type, value } = this;
        const id = el.id || guid();
        const radiusRatio = 0.45;
        const size = inline ? this.getInlineSize(scale) : this.getSize(scale);
        const radius = size * radiusRatio;
        const viewbox = `0 0 ${size} ${size}`;
        const isDeterminate = type === "determinate";
        const circumference = 2 * radius * Math.PI;
        const progress = (value / 100) * circumference;
        const remaining = circumference - progress;
        const valueNow = Math.floor(value);
        const hostAttributes = {
            "aria-valuenow": valueNow,
            "aria-valuemin": 0,
            "aria-valuemax": 100,
            complete: valueNow === 100,
        };
        const svgAttributes = { r: radius, cx: size / 2, cy: size / 2 };
        const determinateStyle = { "stroke-dasharray": `${progress} ${remaining}` };
        return (h(Host, { key: '1042b6b24e04a6e4582947c6a544da715ff255a4', "aria-label": label, id: id, role: "progressbar", ...(isDeterminate ? hostAttributes : {}) }, h("div", { key: '4fa16470d15e126378e330a03732e0f5f5fe12a6', class: "loader__svgs" }, h("svg", { key: 'f2f2349163dd4280309cae9a53d20596850e89ae', "aria-hidden": "true", class: "loader__svg loader__svg--1", viewBox: viewbox }, h("circle", { key: 'cab1f07b5e5f275709446ee13e9a06212bc544a9', ...svgAttributes })), h("svg", { key: 'f8d6bedac7cef0c7f619eec7734a1cda1b8021db', "aria-hidden": "true", class: "loader__svg loader__svg--2", viewBox: viewbox }, h("circle", { key: '778a680d0d93cdf7896c8bf225f153ea806e76ce', ...svgAttributes })), h("svg", { key: '80f42b04b4f0dd270c0a0f8063c9c5e6ed687b79', "aria-hidden": "true", class: "loader__svg loader__svg--3", viewBox: viewbox, ...(isDeterminate ? { style: determinateStyle } : {}) }, h("circle", { key: '3d4cb781a9af29810069f020aecffba667c72335', ...svgAttributes }))), text && h("div", { key: '4e7b35dddd29bbcfc4043aecd14ee22131c9f5cc', class: "loader__text" }, text), isDeterminate && h("div", { key: '396313f330b54f7f7a45ebac7ccb1cf8b8116471', class: "loader__percentage" }, value)));
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    /**
     * Return the proper sizes based on the scale property
     *
     * @param scale
     */
    getSize(scale) {
        return {
            s: 32,
            m: 56,
            l: 80,
        }[scale];
    }
    getInlineSize(scale) {
        return {
            s: 12,
            m: 16,
            l: 20,
        }[scale];
    }
    static get is() { return "calcite-loader"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["loader.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["loader.css"]
        };
    }
    static get properties() {
        return {
            "inline": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "When `true`, displays smaller and appears to the left of the text."
                },
                "attribute": "inline",
                "reflect": true,
                "defaultValue": "false"
            },
            "label": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": true,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Accessible name for the component."
                },
                "attribute": "label",
                "reflect": false
            },
            "scale": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "Scale",
                    "resolved": "\"l\" | \"m\" | \"s\"",
                    "references": {
                        "Scale": {
                            "location": "import",
                            "path": "../interfaces",
                            "id": "src/components/interfaces.ts::Scale"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specifies the size of the component."
                },
                "attribute": "scale",
                "reflect": true,
                "defaultValue": "\"m\""
            },
            "type": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "\"indeterminate\" | \"determinate\"",
                    "resolved": "\"determinate\" | \"indeterminate\"",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specifies the component type.\n\nUse `\"indeterminate\"` if finding actual progress value is impossible."
                },
                "attribute": "type",
                "reflect": true
            },
            "value": {
                "type": "number",
                "mutable": false,
                "complexType": {
                    "original": "number",
                    "resolved": "number",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The component's value. Valid only for `\"determinate\"` indicators. Percent complete of 100."
                },
                "attribute": "value",
                "reflect": false,
                "defaultValue": "0"
            },
            "text": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Text that displays under the component's indicator."
                },
                "attribute": "text",
                "reflect": false,
                "defaultValue": "\"\""
            }
        };
    }
    static get elementRef() { return "el"; }
}
//# sourceMappingURL=loader.js.map
