import { E2EPage } from "@stencil/core/testing";
import { TagOrHTML } from "./interfaces";
interface BeforeToggle {
    /**
     * Function argument to simulate user input (mouse or keyboard), to open the component.
     */
    open: (page: E2EPage) => Promise<void>;
    /**
     * Function argument to simulate user input (mouse or keyboard), to close the component.
     */
    close: (page: E2EPage) => Promise<void>;
}
interface OpenCloseOptions {
    /**
     * Toggle property to test. Currently, either "open" or "expanded".
     */
    openPropName?: string;
    /**
     * Indicates the initial value of the toggle property.
     */
    initialToggleValue?: boolean;
    /**
     * Optional argument with functions to simulate user input (mouse or keyboard), to open or close the component.
     */
    beforeToggle?: BeforeToggle;
}
/**
 * Helper to test openClose component setup.
 *
 * Note that this helper should be used within a `describe` block.
 *
 * @example
 *
 * describe("openClose", () => {
 *   openClose("calcite-combobox opened with a tab", {
 *     beforeToggle: {
 *        open: async (page) => {
 *            await page.keyboard.press("Tab");
 *            await page.waitForChanges();
 *        },
 *        close: async (page) => {
 *            await page.keyboard.press("Tab");
 *            await page.waitForChanges();
 *        },
 *      }
 *   });
 *
 *  openClose("open calcite-combobox closed with a tab", {
 *        initialToggleValue: true,
 *        beforeToggle: {
 *          close: async (page) => {
 *            await page.keyboard.press("Tab");
 *            await page.waitForChanges();
 *        },
 *      }
 *    }
 * })
 *
 * @param componentTagOrHTML - The component tag or HTML markup to test against.
 * @param {object} [options] - Additional options to assert.
 */
export declare function openClose(componentTagOrHTML: TagOrHTML, options?: OpenCloseOptions): void;
export {};
