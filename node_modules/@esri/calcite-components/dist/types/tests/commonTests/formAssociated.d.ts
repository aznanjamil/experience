import { KeyInput } from "puppeteer";
import { TagOrHTMLWithBeforeContent, TagOrHTML } from "./interfaces";
interface FormAssociatedOptions {
    /**
     * This value will be set on the component and submitted by the form.
     */
    testValue: any;
    /**
     * Set this if the expected submit value **is different** from stringifying `testValue`.
     * For example, a component may transform an object to a serializable string.
     */
    expectedSubmitValue?: any;
    validUserInputTestValue?: string;
    changeValueKeys?: KeyInput[];
    /**
     * Specifies the input type that will be used to capture the value.
     */
    inputType?: HTMLInputElement["type"];
    /**
     * Specifies if the component supports submitting the form on Enter key press.
     */
    submitsOnEnter?: boolean;
    /**
     * Specifies if the component supports clearing its value (i.e., setting to null).
     */
    clearable?: boolean;
    /**
     * Specifies if the component supports preventing submission and displaying validation messages.
     */
    validation?: boolean;
}
/**
 * Helper for testing form-associated components; specifically form submitting and resetting.
 *
 * Note that this helper should be used within a describe block.
 *
 * @param {string} componentTagOrHtml - the component tag or HTML markup to test against
 * @param {FormAssociatedOptions} options - form associated options
 */
export declare function formAssociated(componentTagOrHtml: TagOrHTML | TagOrHTMLWithBeforeContent, options: FormAssociatedOptions): void;
export {};
